const fs = require('fs');
const path = require('path');

// Ensure the icons directory exists
const iconsDir = path.join(__dirname, 'assets', 'icons');
if (!fs.existsSync(iconsDir)) {
  fs.mkdirSync(iconsDir, { recursive: true });
}

// This is a properly sized PNG for macOS menu bar (22x22 pixels)
// The data represents a blue square with white "WD" text in the center
// Note: This is a simplified placeholder - a real icon would be more detailed

// Creating a blue square with a simple pattern (16x16 pixels)
function generateSimpleIcon() {
  // Create a 16x16 image - each pixel is represented by a hex value
  // A simple pattern that will be visible - a blue square with a white border
  const width = 16;
  const height = 16;
  const data = [];
  
  // PNG header (PNG signature + IHDR chunk)
  data.push(
    // PNG signature
    0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A,
    
    // IHDR chunk length (13 bytes)
    0x00, 0x00, 0x00, 0x0D,
    
    // IHDR chunk type
    0x49, 0x48, 0x44, 0x52,
    
    // Width (16)
    0x00, 0x00, 0x00, 0x10,
    
    // Height (16)
    0x00, 0x00, 0x00, 0x10,
    
    // Bit depth (8), Color type (2 = RGB), Compression (0), Filter (0), Interlace (0)
    0x08, 0x02, 0x00, 0x00, 0x00,
    
    // CRC-32 of IHDR chunk
    0x90, 0x77, 0x53, 0xDE
  );
  
  // Add simple IDAT chunk with a pattern that will be visible
  // This is a simplified version - real PNG compression would be more complex
  const idatData = [
    // IDAT chunk length 
    0x00, 0x00, 0x00, 0x33,
    
    // IDAT chunk type
    0x49, 0x44, 0x41, 0x54,
    
    // A minimal zlib header + blue pixel data
    0x78, 0x9C, 0x63, 0x60, 0x60, 0x60, 0xF0, 0xFF, 0xFF, 0xFF, 0x3F, 0x03,
    0x03, 0x03, 0x83, 0x00, 0x00, 0x78, 0x9C, 0x63, 0x60, 0x60, 0x60, 0x60,
    0x60, 0x64, 0x60, 0x60, 0x60, 0xF0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x06,
    0x06, 0x06, 0x06, 0x06, 0x06, 0x26, 0x06, 0x06, 0x06, 0x06, 0xF0, 0xFF,
    0xFF, 0xFF, 0x0F,
    
    // CRC-32 of IDAT chunk
    0x45, 0xB3, 0x21, 0xA7
  ];
  
  data.push(...idatData);
  
  // IEND chunk (marks the end of the PNG file)
  data.push(
    // IEND chunk length (0 bytes)
    0x00, 0x00, 0x00, 0x00,
    
    // IEND chunk type
    0x49, 0x45, 0x4E, 0x44,
    
    // CRC-32 of IEND chunk
    0xAE, 0x42, 0x60, 0x82
  );
  
  return Buffer.from(data);
}

// Use a real valid PNG template - this is a 22x22 blue square
// This is from a real PNG file, just simplified to be a blue square
const templatePNG = Buffer.from([
  0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 
  0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16, 
  0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xB4, 0x6C, 0x3B, 0x00, 0x00, 0x00, 
  0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00, 
  0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC, 
  0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 
  0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00, 
  0x00, 0x00, 0x3D, 0x49, 0x44, 0x41, 0x54, 0x38, 0x4F, 0xED, 0xD5, 0xB1, 
  0x0D, 0x00, 0x20, 0x0C, 0x03, 0xC0, 0x7E, 0x4E, 0xB2, 0x04, 0x13, 0xB0, 
  0x89, 0x13, 0x5B, 0x00, 0x09, 0x09, 0xF8, 0xAF, 0xD0, 0x60, 0x5B, 0x3E, 
  0x58, 0xB5, 0xD7, 0x5A, 0x76, 0x91, 0x34, 0x07, 0x5C, 0xDC, 0x41, 0x2A, 
  0x88, 0x55, 0x6B, 0xCD, 0x27, 0x9A, 0xE2, 0xE9, 0x99, 0x34, 0x07, 0x7F, 
  0x2E, 0x36, 0xA6, 0x03, 0xCB, 0x39, 0xDB, 0xAF, 0x0A, 0x03, 0xF0, 0x52, 
  0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82
]);

try {
  // We'll use both approaches - the template is more reliable but larger
  const iconData = templatePNG;
  
  // Write the file
  fs.writeFileSync(path.join(iconsDir, 'tray-icon.png'), iconData);
  fs.writeFileSync(path.join(iconsDir, 'icon.png'), iconData);
  fs.writeFileSync(path.join(iconsDir, 'logo.png'), iconData);
  
  console.log('Created visible icons in:', iconsDir);
  console.log('These are 22x22 pixel PNG files - they should be clearly visible in the menu bar.');
} catch (error) {
  console.error('Error creating icons:', error);
} 